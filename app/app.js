/* ·ª®NG D·ª§NG CH√çNH (b·∫£o m·∫≠t ‚Äì d√πng sysId ·∫©n danh) */
window.App = {
  speak: (t)=> TTS.speak(t, AppState.learner.ttsRate || 0.9),
  nav(screen){
    document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
    const el = document.getElementById('screen-' + screen);
    if (el) el.classList.add('active');

    if (screen==='dashboard') DashboardModule.render();
    if (screen==='pa') { PAModule.render(); if (AppState.childMode) Coach.say('K√©o c√°c m·∫£nh ƒë·ªÉ gh√©p th√†nh t·ª´.'); }
    if (screen==='cards') { CardsModule.render(); if (AppState.childMode) Coach.say('Ch·∫°m nghe t·ª´ v√† ch·ªçn kh√≥ hay d·ªÖ.'); }
    if (screen==='reading') { ReadingModule.init(); if (AppState.childMode) Coach.say('Nh·∫•n b·∫Øt ƒë·∫ßu r·ªìi ƒë·ªçc to. G·∫∑p t·ª´ kh√≥ th√¨ ch·∫°m ƒë·ªÉ ƒë√°nh d·∫•u.'); }
    if (screen==='game')   { GameModule.init(); if (AppState.childMode) Coach.say('Pop b√≥ng ƒë√∫ng theo y√™u c·∫ßu ƒë·ªÉ ghi ƒëi·ªÉm.'); }

    if (screen==='home') VoiceUI.speak('Trang ch√≠nh. Ch·ªçn luy·ªán √¢m v·ªã, th·∫ª t·ª´, ƒë·ªçc ƒëo·∫°n, tr√≤ ch∆°i, ho·∫∑c b·∫£ng ƒëi·ªÅu khi·ªÉn.');
    if (screen==='pa') VoiceUI.speak('Luy·ªán √¢m v·ªã. K√©o ho·∫∑c ch·∫°m ƒë·ªÉ gh√©p √¢m. Nh·∫•n gi·ªØ n√∫t ƒë·ªÉ nghe t√™n ch·ª©c nƒÉng.');
    if (screen==='cards') VoiceUI.speak('Th·∫ª t·ª´. Ch·∫°m nghe t·ª´, ch·ªçn d·ªÖ, v·ª´a ho·∫∑c kh√≥.');
    if (screen==='reading') VoiceUI.speak('ƒê·ªçc ƒëo·∫°n. Nh·∫•n B·∫Øt ƒë·∫ßu ƒë·ªÉ t√≠nh gi·ªù. C√≥ thanh tr∆∞·ª£t t·ªëc ƒë·ªô gi·ªçng ƒë·ªçc.');
    if (screen==='game') VoiceUI.speak('Tr√≤ ch∆°i. Ch·ªçn ch·∫ø ƒë·ªô theo thanh ƒëi·ªáu ho·∫∑c nh√≥m l·ªói, sau ƒë√≥ b·∫•m B·∫Øt ƒë·∫ßu.');
    if (screen==='dashboard') VoiceUI.speak('B·∫£ng ƒëi·ªÅu khi·ªÉn. Xem ti·∫øn b·ªô v√† ƒë·ªìng b·ªô d·ªØ li·ªáu.');
    if (screen==='settings') VoiceUI.speak('C√†i ƒë·∫∑t. Ch·ªâ nh·∫≠p H·ªç t√™n (l∆∞u t·∫°i m√°y). M√£ ·∫©n danh t·ª± c·∫•p.');
    if (screen==='export') VoiceUI.speak('Xu·∫•t d·ªØ li·ªáu. T·∫£i CSV ho·∫∑c sao ch√©p.');

    VoiceUI.attachAll();
    Effects?.bindRipples?.();
  },
  toast(msg){ console.log('[Toast]', msg); },
  init(){
    // Theme (n·∫øu c√≥)
    const savedTheme = localStorage.getItem('theme') || 'warm';
    setTheme(savedTheme);

    document.body.style.fontFamily = {
      'Lexend': '"Lexend", var(--font-body)',
      'OpenDyslexic': '"OpenDyslexic", var(--font-body)',
      'System Sans': 'var(--font-body)'
    }[AppState.learner.font || 'System Sans'];

    AppState.srInit();

    // Toolbar
    const btnSettings = document.getElementById('btnSettings');
    if (btnSettings) btnSettings.onclick = ()=> App.nav('settings');
    const btnHelp = document.getElementById('btnHelp');
    if (btnHelp) btnHelp.onclick = ()=>{
      document.getElementById('modalHelp').classList.add('active');
      VoiceUI.speak('H∆∞·ªõng d·∫´n. Nh·∫•n gi·ªØ n√∫t ƒë·ªÉ nghe t√™n tr∆∞·ªõc khi ch·ªçn.');
    };

    const btnTheme = document.getElementById('btnTheme');
    if (btnTheme){
      btnTheme.onclick = ()=>{
        const cur = localStorage.getItem('theme') || 'warm';
        const next = cur==='warm' ? 'cool' : (cur==='cool' ? 'dark' : 'warm');
        setTheme(next);
        VoiceUI.say(next==='warm'?'Giao di·ªán ·∫•m':(next==='cool'?'Giao di·ªán m√°t':'Giao di·ªán t·ªëi'));
      };
    }

    // Child mode
    const btnChild = document.getElementById('btnChild');
    const lockbar = document.getElementById('lockbar');
    const updateChildUI = ()=> {
      if (!btnChild) return;
      btnChild.textContent = AppState.childMode ? 'üö∏ T·ª± h·ªçc: B·∫≠t' : 'üö∏ T·ª± h·ªçc: T·∫Øt';
      document.body.classList.toggle('child', AppState.childMode);
      if (lockbar) lockbar.style.display = AppState.childMode ? '' : 'none';
    };
    if (btnChild){
      btnChild.onclick = ()=>{
        AppState.childMode = !AppState.childMode;
        Store.set('childMode', AppState.childMode);
        updateChildUI();
        if (AppState.childMode) Coach.say('Ch·∫ø ƒë·ªô t·ª± h·ªçc ƒë√£ b·∫≠t. Con l√†m theo h∆∞·ªõng d·∫´n nh√©.');
      };
    }
    updateChildUI();

    // Unlock long press
    const unlockBtn = document.getElementById('btnUnlock');
    if (unlockBtn){
      let pressTimer;
      const resetTxt = ()=> unlockBtn.textContent = 'Gi·ªØ 3s ƒë·ªÉ tho√°t';
      unlockBtn.addEventListener('pointerdown', ()=>{
        unlockBtn.textContent = 'ƒêang m·ªü kh√≥a...';
        pressTimer = setTimeout(()=>{
          AppState.childMode = false; Store.set('childMode', false);
          updateChildUI(); resetTxt();
          VoiceUI.say('ƒê√£ tho√°t ch·∫ø ƒë·ªô t·ª± h·ªçc');
        }, 3000);
      });
      unlockBtn.addEventListener('pointerup', ()=>{ clearTimeout(pressTimer); resetTxt(); });
      unlockBtn.addEventListener('pointerleave', ()=>{ clearTimeout(pressTimer); resetTxt(); });
    }

    // Levels
    const levels = Array.isArray(window.PASSAGES) ? Array.from(new Set(window.PASSAGES.map(p=>p.level))).sort((a,b)=>a-b) : [];
    const selLevel = document.getElementById('selLevel');
    if (selLevel) selLevel.innerHTML = levels.map(l=> `<option value="${l}">C·∫•p ${l}</option>`).join('');
    const selStartLevel = document.getElementById('selStartLevel');
    if (selStartLevel) selStartLevel.innerHTML = selLevel ? selLevel.innerHTML : '';

    if (selLevel && AppState.learner.level) selLevel.value = AppState.learner.level;
    if (selStartLevel && AppState.learner.level) selStartLevel.value = AppState.learner.level;
    const f = (id)=> document.getElementById(id);

    // ƒêi·ªÅn C√†i ƒë·∫∑t (kh√¥ng g·ª≠i ƒëi)
    if (f('inpName')) f('inpName').value = AppState.learner.name || '';
    if (f('dispSysId')) f('dispSysId').value = AppState.learner.sysId || '';
    if (f('inpAge')) f('inpAge').value = AppState.learner.age || '';
    if (f('inpGrade')) f('inpGrade').value = AppState.learner.grade || '';
    if (f('selFont')) f('selFont').value = AppState.learner.font || 'System Sans';
    if (f('inpRate')) f('inpRate').value = AppState.learner.ttsRate || 0.9;
    if (f('rateSlider')) f('rateSlider').value = AppState.learner.ttsRate || 0.9;
    if (f('rateVal')) f('rateVal').textContent = (AppState.learner.ttsRate || 0.9).toFixed(2)+'x';

    // Sync settings
    if (f('inpSyncUrl')) f('inpSyncUrl').value = Sync.endpoint || '';
    if (f('inpSyncSecret')) f('inpSyncSecret').value = Sync.secret || '';

    App.updateLearnerBadge();
    App.updateStars();

    // Onboarding n·∫øu ch∆∞a c√≥ name (t√πy ch·ªçn)
    if (!AppState.learner.name) document.getElementById('modalOnboard').classList.add('active');

    App.updateNextLevelHint();

    const btnVoice = document.getElementById('btnVoice');
    const updateVoiceBtn = ()=> { if (btnVoice) btnVoice.textContent = (VoiceUI.enabled ? 'üîä Gi·ªçng n√≥i: B·∫≠t' : 'üîá Gi·ªçng n√≥i: T·∫Øt'); };
    if (btnVoice){
      btnVoice.onclick = ()=> { VoiceUI.toggle(); updateVoiceBtn(); VoiceUI.speak(VoiceUI.enabled ? 'ƒê√£ b·∫≠t gi·ªçng n√≥i tr·ª£ gi√∫p' : 'ƒê√£ t·∫Øt gi·ªçng n√≥i tr·ª£ gi√∫p'); };
      updateVoiceBtn();
    }

    if (location.protocol.startsWith('http') && 'serviceWorker' in navigator && location.hostname !== 'localhost') {
      navigator.serviceWorker.register('sw.js').catch(err=>console.warn('[SW]', err));
    }
    window.addEventListener('online', ()=> Sync.flush());

    App.updateSyncStatus();
    Sync.flush();
    Sync.startAuto?.();

    VoiceUI.attachAll();
    Effects?.bindRipples?.();

    App.nav('home');
  },
  updateLearnerBadge(){
    const b = document.getElementById('learnerBadge'); const L = AppState.learner;
    // Hi·ªÉn th·ªã m√£ ·∫©n danh r√∫t g·ªçn 6 k√Ω t·ª± cu·ªëi
    const shortId = (L.sysId || 'DDXXXX').slice(-6);
    if (b) b.textContent = `M√£: ${shortId}, C·∫•p: ${L.level || 1}`;
  },
  updateNextLevelHint(){
    const plan = window.adaptivePlan(AppState.logs, AppState.learner.level || 1);
    const el = document.getElementById('nextLevelHint');
    if (el) el.textContent = `C·∫•p ${plan.nextLevel}`;
  },
  updateStars(){
    const el = document.getElementById('starCount');
    if (!el) return;
    el.textContent = `‚≠ê ${AppState.stars||0}`;
    Store.set('stars', AppState.stars||0);
  },
  addStar(n=1){
    AppState.stars = (AppState.stars||0) + n;
    this.updateStars();
    Effects?.starPop?.();
  },

  updateRateFromSlider(v){
    const rate = +v;
    AppState.learner.ttsRate = rate; Store.set('learner', AppState.learner);
    const rv = document.getElementById('rateVal'); if (rv) rv.textContent = rate.toFixed(2)+'x';
    VoiceUI.say(`T·ªëc ƒë·ªô ${rate.toFixed(2)} l·∫ßn`, 600);
  },

  saveSettings(){
    const g = (id)=> document.getElementById(id);
    AppState.learner.name  = (g('inpName')?.value || '').trim();
    AppState.learner.age   = +(g('inpAge')?.value || '') || null;
    AppState.learner.grade = (g('inpGrade')?.value || '').trim();
    AppState.learner.font  = g('selFont')?.value || AppState.learner.font || 'System Sans';
    AppState.learner.ttsRate = +(g('inpRate')?.value || '') || AppState.learner.ttsRate || 0.9;
    AppState.learner.level = +(g('selStartLevel')?.value || '') || AppState.learner.level || 1;
    // sysId gi·ªØ nguy√™n (·∫©n danh)
    Store.set('learner', AppState.learner);
    App.init();
    alert('ƒê√£ l∆∞u c√†i ƒë·∫∑t.');
  },
  finishOnboard(){
    const name = (document.getElementById('obName')?.value || '').trim();
    const age  = +(document.getElementById('obAge')?.value || '') || null;
    const grade= (document.getElementById('obGrade')?.value || '').trim();
    // Kh√¥ng b·∫Øt bu·ªôc H·ªç t√™n; n·∫øu tr·ªëng v·∫´n ti·∫øp t·ª•c
    AppState.learner.name = name; AppState.learner.age = age; AppState.learner.grade = grade;
    if (!AppState.learner.sysId) AppState.learner.sysId = 'DD' + Math.random().toString(36).slice(2,12).toUpperCase();
    Store.set('learner', AppState.learner);
    App.updateLearnerBadge();
    document.getElementById('modalOnboard').classList.remove('active');
    VoiceUI.speak('Thi·∫øt l·∫≠p xong. V√†o trang ch√≠nh ƒë·ªÉ b·∫Øt ƒë·∫ßu.');
  },

  saveSync(){
    const url = document.getElementById('inpSyncUrl').value.trim();
    const secret = document.getElementById('inpSyncSecret').value.trim();
    Sync.setEndpoint(url); Sync.setSecret(secret);
    alert('ƒê√£ l∆∞u c√†i ƒë·∫∑t ƒë·ªìng b·ªô.');
    App.updateSyncStatus();
  },
  async testSync(){
    if (!Sync.endpoint || !Sync.secret) { alert('Ch∆∞a c·∫•u h√¨nh URL/SECRET.'); return; }
    try{
      const res = await fetch(Sync.endpoint, { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({ secret: Sync.secret, ping:true }) });
      const js = await res.json();
      alert('K·∫øt n·ªëi OK: ' + JSON.stringify(js));
    }catch(e){ alert('Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c. Ki·ªÉm tra URL ho·∫∑c quy·ªÅn Web App.'); }
    App.updateSyncStatus();
  },
  showSyncHelp(){
    alert('ƒê·ªìng b·ªô c·∫ßn Google Apps Script Web App (Execute as: Me, Access: Anyone). D√°n URL v√†o ph·∫ßn C√†i ƒë·∫∑t > ƒê·ªìng b·ªô.');
  },
  updateSyncStatus(){
    const s = document.getElementById('syncStatus');
    if (!s) return;
    const q = Sync.queue?.length || 0;
    const status = Sync.endpoint ? `H√†ng ƒë·ª£i: ${q} ‚Ä¢ ${Sync.lastStatus || ''}` : 'ch∆∞a c·∫•u h√¨nh';
    s.textContent = 'Tr·∫°ng th√°i: ' + status;
  },

  // CSV CH·ªà CH·ª®A CH·ªà S·ªê ƒê√ÅNH GI√Å ‚Äì KH√îNG CH·ª®A H·ªå T√äN/tu·ªïi/l·ªõp
  exportCSV(){
    const rows = (AppState.logs||[]).map(x => ({
      learner_id: AppState.learner.sysId || '',
      date: new Date(x.ts).toISOString(),
      session_id: x.sessionId || '',
      type: x.type,
      level: x.level || '',
      passage_id: x.passageId || '',
      duration_ms: x.durationMs || '',
      total_words: x.totalWords || '',
      correct_words: x.correctWords || '',
      wcpm: x.wcpm || '',
      accuracy: x.accuracy || '',
      comp_correct: x.compCorrect ?? '',
      comp_total: x.compTotal ?? '',
      used_tts: x.usedTTS ?? '',
      errors_tone: x.errorsByType?.tone ?? 0,
      errors_sx: x.errorsByType?.sx ?? 0,
      errors_chtr: x.errorsByType?.chtr ?? 0,
      errors_omission: x.errorsByType?.omission ?? 0,
      errors_insertion: x.errorsByType?.insertion ?? 0,
      errors_other: x.errorsByType?.other ?? 0
    }));
    const csv = window.toCSV(rows);
    window.download(`docde_${(AppState.learner.sysId||'anon').slice(-6)}.csv`, csv);
  },
  copyCSV(){
    const rows = (AppState.logs||[]).map(x => ({
      learner_id: AppState.learner.sysId || '',
      date: new Date(x.ts).toISOString(),
      session_id: x.sessionId || '',
      type: x.type,
      level: x.level || '',
      passage_id: x.passageId || '',
      duration_ms: x.durationMs || '',
      total_words: x.totalWords || '',
      correct_words: x.correctWords || '',
      wcpm: x.wcpm || '',
      accuracy: x.accuracy || '',
      comp_correct: x.compCorrect ?? '',
      comp_total: x.compTotal ?? '',
      used_tts: x.usedTTS ?? '',
      errors_tone: x.errorsByType?.tone ?? 0,
      errors_sx: x.errorsByType?.sx ?? 0,
      errors_chtr: x.errorsByType?.chtr ?? 0,
      errors_omission: x.errorsByType?.omission ?? 0,
      errors_insertion: x.errorsByType?.insertion ?? 0,
      errors_other: x.errorsByType?.other ?? 0
    }));
    const csv = window.toCSV(rows);
    navigator.clipboard?.writeText(csv).then(()=> alert('ƒê√£ sao ch√©p CSV.')).catch(()=> alert('Kh√¥ng sao ch√©p ƒë∆∞·ª£c. H√£y d√πng n√∫t T·∫£i CSV.'));
  },
  resetConfirm(){
    if (confirm('X√ìA TO√ÄN B·ªò D·ªÆ LI·ªÜU tr√™n thi·∫øt b·ªã n√†y?')) {
      localStorage.removeItem('logs'); AppState.logs = [];
      alert('ƒê√£ x√≥a.'); DashboardModule.render();
    }
  }
};

function setTheme(name){
  const root = document.documentElement;
  const v = name==='cool' ? 'cool' : (name==='dark' ? 'dark' : null);
  if (v) root.setAttribute('data-theme', v); else root.removeAttribute('data-theme');
  localStorage.setItem('theme', name);
}

window.addEventListener('load', () => { 
  App.init();
  Sync.startAuto?.();
});
App.pa = window.PAModule;
App.cards = window.CardsModule;
App.reading = window.ReadingModule;
App.dashboard = window.DashboardModule;
App.game = window.GameModule;